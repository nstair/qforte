# CMakeLists.txt for Python extension with Thrust
cmake_minimum_required(VERSION 3.18)
project(thrust_test_py CUDA CXX)

# Find CUDA
find_package(CUDA REQUIRED)
include_directories(${CUDA_INCLUDE_DIRS})

# Find Python and pybind11
find_package(Python COMPONENTS Interpreter Development REQUIRED)
find_package(pybind11 CONFIG)
if(NOT pybind11_FOUND)
    message(STATUS "pybind11 not found via find_package, trying to find in system path...")
    execute_process(
        COMMAND ${Python_EXECUTABLE} -c "import pybind11; print(pybind11.get_include())"
        OUTPUT_VARIABLE PYBIND11_INCLUDE_DIR
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if(NOT PYBIND11_INCLUDE_DIR)
        message(FATAL_ERROR "pybind11 not found. Please install it using pip: pip install pybind11")
    endif()
    include_directories(${PYBIND11_INCLUDE_DIR})
endif()

# Set CUDA architectures
set(CMAKE_CUDA_ARCHITECTURES 60 70 75 80 86)

# Enable C++14
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CUDA_STANDARD 14)

# Define the source files
set(SOURCE_FILES
    thrust_test_py.cu
)

# Add the pybind11 module
pybind11_add_module(thrust_test_py MODULE ${SOURCE_FILES})

# Set CUDA-specific compiler flags
set_target_properties(thrust_test_py PROPERTIES
    CUDA_SEPARABLE_COMPILATION ON
)

# Link against CUDA libraries
target_link_libraries(thrust_test_py PRIVATE ${CUDA_LIBRARIES})

# Set the output name based on Python's extension suffix
set_target_properties(thrust_test_py PROPERTIES 
    PREFIX "${PYTHON_MODULE_PREFIX}"
    SUFFIX "${PYTHON_MODULE_EXTENSION}"
)
